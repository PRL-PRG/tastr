/* -*- C++ -*- */
%option outfile="Lexer.cxx"
%option header-file="Lexer.hxx"
%option yyclass="tastr::parser::Lexer"
%option debug
%option nodefault
%option noyywrap
%option c++

%{
    #include <string>
    #include "parser/Lexer.hpp"
    #include "parser/ParsingContext.hpp"

    /* Code run each time a pattern is matched. */
    #define YY_USER_ACTION  yylloc->columns(yyleng);

    #define HANDLE_TOKEN(token_name)                          \
        yylval->build<std::string>(yytext);                   \
        return tastr::parser::Parser::token::token_name;

    #define HANDLE_QUOTED_IDENTIFIER()                                \
        yylval->build<std::string>(extract_identifier());             \
        return tastr::parser::Parser::token::TOKEN_QUOTED_IDENTIFIER;

%}

INTEGER             integer|int|i
DOUBLE              double|dbl|d
COMPLEX             complex|clx|x
CHARACTER           character|chr|s
LOGICAL             logical|lgl|l
RAW                 raw|r
ENVIRONMENT         environment|env|t
EXPRESSION          expression|exr|e
LANGUAGE            language|lng|g
SYMBOL              symbol|sym|y
EXTERNALPOINTER     externalptr|ept|p
BYTECODE            bytecode|bcd|b
PAIRLIST            pairlist|plt
S4                  s4
WEAKREF             weakref|wrf|w
TUPLE               tuple|tpl
LIST                list|lst
STRUCT              struct|srt
ANY                 any|[*]
UNKNOWN             [?][?][?]
NULLVALUE           [?]
TYPEDECL            type
BLANK               [ \t\r]
VARARG              \.\.\.
IDENTIFIER          [a-zA-Z.][a-zA-Z0-9._]*
NON_HEX             [^0-9A-Fa-f]
NON_OCT             [^0-7]

%x quoted_identifier
%x comment

%%

%{
    /* Code run each time yylex is called. */
    yylloc -> step();
%}

{BLANK}+                    { yylloc -> step(); yylloc -> append_prefix(yytext); }
\n+                         { yylloc -> lines(yyleng); yylloc -> step(); yylloc -> append_prefix(yytext); }
"#"                         { BEGIN(comment); yylloc -> append_prefix(yytext); }
<comment>{
    \n                      { BEGIN(INITIAL); yylloc -> lines(yyleng); yylloc -> step(); yylloc -> append_prefix(yytext); }
    .                       { yylloc -> step(); yylloc -> append_prefix(yytext); }
}
"|"                         { HANDLE_TOKEN(TOKEN_OR) }
"^"                         { HANDLE_TOKEN(TOKEN_CARET) }
"=>"                        { HANDLE_TOKEN(TOKEN_ARROW) }
","                         { HANDLE_TOKEN(TOKEN_COMMA) }
"(("                        { HANDLE_TOKEN(TOKEN_DOUBLE_LPAREN) }
"("                         { HANDLE_TOKEN(TOKEN_LPAREN) }
"))"                        { HANDLE_TOKEN(TOKEN_DOUBLE_RPAREN) }
")"                         { HANDLE_TOKEN(TOKEN_RPAREN) }
"[]"                        { HANDLE_TOKEN(TOKEN_VECTOR_BRACKET) }
"<"                         { HANDLE_TOKEN(TOKEN_LANGLEBRACKET) }
">"                         { HANDLE_TOKEN(TOKEN_RANGLEBRACKET) }
"]]"                        { HANDLE_TOKEN(TOKEN_DOUBLE_RBRACKET) }
"[["                        { HANDLE_TOKEN(TOKEN_DOUBLE_LBRACKET) }
"{{"                        { HANDLE_TOKEN(TOKEN_DOUBLE_LBRACE) }
"}}"                        { HANDLE_TOKEN(TOKEN_DOUBLE_RBRACE) }
";"                         { HANDLE_TOKEN(TOKEN_SEMICOLON) }
":"                         { HANDLE_TOKEN(TOKEN_COLON) }
"..."                       { HANDLE_TOKEN(TOKEN_VARARG) }
{INTEGER}                   { HANDLE_TOKEN(TOKEN_INTEGER) }
{DOUBLE}                    { HANDLE_TOKEN(TOKEN_DOUBLE) }
{COMPLEX}                   { HANDLE_TOKEN(TOKEN_COMPLEX) }
{CHARACTER}                 { HANDLE_TOKEN(TOKEN_CHARACTER) }
{LOGICAL}                   { HANDLE_TOKEN(TOKEN_LOGICAL) }
{RAW}                       { HANDLE_TOKEN(TOKEN_RAW) }
{ENVIRONMENT}               { HANDLE_TOKEN(TOKEN_ENVIRONMENT) }
{EXPRESSION}                { HANDLE_TOKEN(TOKEN_EXPRESSION) }
{LANGUAGE}                  { HANDLE_TOKEN(TOKEN_LANGUAGE) }
{SYMBOL}                    { HANDLE_TOKEN(TOKEN_SYMBOL) }
{EXTERNALPOINTER}           { HANDLE_TOKEN(TOKEN_EXTERNALPOINTER) }
{BYTECODE}                  { HANDLE_TOKEN(TOKEN_BYTECODE) }
{PAIRLIST}                  { HANDLE_TOKEN(TOKEN_PAIRLIST) }
{S4}                        { HANDLE_TOKEN(TOKEN_S4) }
{WEAKREF}                   { HANDLE_TOKEN(TOKEN_WEAKREF) }
{TUPLE}                     { HANDLE_TOKEN(TOKEN_TUPLE) }
{LIST}                      { HANDLE_TOKEN(TOKEN_LIST) }
{STRUCT}                    { HANDLE_TOKEN(TOKEN_STRUCT) }
{ANY}                       { HANDLE_TOKEN(TOKEN_ANY) }
{UNKNOWN}                   { HANDLE_TOKEN(TOKEN_UNKNOWN) }
{NULLVALUE}                 { HANDLE_TOKEN(TOKEN_NULLVALUE) }
{TYPEDECL}                  { HANDLE_TOKEN(TOKEN_TYPEDECL) }
{IDENTIFIER}                { HANDLE_TOKEN(TOKEN_IDENTIFIER) }
"`"                         { BEGIN(quoted_identifier); }
<quoted_identifier>{
    `                           { BEGIN(INITIAL); HANDLE_QUOTED_IDENTIFIER() }
    \\0{NON_OCT}                { throw tastr::parser::Parser::syntax_error(*yylloc, "null character not allowed: " + std::string(yytext)); }
    \\00{NON_OCT}               { throw tastr::parser::Parser::syntax_error(*yylloc, "null character not allowed: " + std::string(yytext)); }
    \\000                       { throw tastr::parser::Parser::syntax_error(*yylloc, "null character not allowed: " + std::string(yytext)); }

    \\x0{NON_HEX}               { throw tastr::parser::Parser::syntax_error(*yylloc, "null character not allowed: " + std::string(yytext)); }
    \\x00                       { throw tastr::parser::Parser::syntax_error(*yylloc, "null character not allowed: " + std::string(yytext)); }
    \\x{NON_HEX}                { throw tastr::parser::Parser::syntax_error(*yylloc, "\\x used without hex digits: " + std::string(yytext)); }

    \\u                         { throw tastr::parser::Parser::syntax_error(*yylloc, "\\uxxxx sequences not supported inside backticks: " + std::string(yytext)); }
    \\U                         { throw tastr::parser::Parser::syntax_error(*yylloc, "\\Uxxxxxxxx sequences not supported inside backticks: " + std::string(yytext)); }
    \\`                         { get_identifier().append("\\`");  }
    [^`]                        { get_identifier().append(yytext); }
}

.                           {
                                throw tastr::parser::Parser::syntax_error(*yylloc, "invalid character: " + std::string(yytext));
                            }
<<EOF>>                     return tastr::parser::Parser::token::TOKEN_EOF;
%%

/* REFERENCE: https://coldfix.eu/2015/05/16/bison-c++11/ */
tastr::parser::Lexer::Lexer(tastr::parser::ParsingContext& parsing_context): yyFlexLexer(parsing_context.get_input_stream(), std::cout), parsing_context_(parsing_context) {
}


